// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: et_def.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_et_5fdef_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_et_5fdef_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_et_5fdef_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_et_5fdef_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_et_5fdef_2eproto;
namespace ChakraProtoMsg {
class AttributeProto;
struct AttributeProtoDefaultTypeInternal;
extern AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace ChakraProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::ChakraProtoMsg::AttributeProto* Arena::CreateMaybeMessage<::ChakraProtoMsg::AttributeProto>(Arena*);
template<> ::ChakraProtoMsg::Node* Arena::CreateMaybeMessage<::ChakraProtoMsg::Node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChakraProtoMsg {

enum NodeType : int {
  INVALID_NODE = 0,
  MEM_LOAD_NODE = 1,
  MEM_STORE_NODE = 2,
  COMP_NODE = 3,
  COMM_SEND_NODE = 4,
  COMM_RECV_NODE = 5,
  COMM_COLL_NODE = 6
};
bool NodeType_IsValid(int value);
constexpr NodeType NodeType_MIN = INVALID_NODE;
constexpr NodeType NodeType_MAX = COMM_COLL_NODE;
constexpr int NodeType_ARRAYSIZE = NodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor();
template<typename T>
inline const std::string& NodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeType_descriptor(), enum_t_value);
}
inline bool NodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeType>(
    NodeType_descriptor(), name, value);
}
enum AttributeType : int {
  FLOAT = 0,
  INT = 1,
  STRING = 2,
  FLOATS = 3,
  INTS = 4,
  STRINGS = 5
};
bool AttributeType_IsValid(int value);
constexpr AttributeType AttributeType_MIN = FLOAT;
constexpr AttributeType AttributeType_MAX = STRINGS;
constexpr int AttributeType_ARRAYSIZE = AttributeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeType_descriptor();
template<typename T>
inline const std::string& AttributeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttributeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttributeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttributeType_descriptor(), enum_t_value);
}
inline bool AttributeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttributeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttributeType>(
    AttributeType_descriptor(), name, value);
}
enum CollectiveCommType : int {
  ALL_REDUCE = 0,
  ALL_TO_ALL = 1,
  ALL_GATHER = 2,
  REDUCE_SCATTER = 3
};
bool CollectiveCommType_IsValid(int value);
constexpr CollectiveCommType CollectiveCommType_MIN = ALL_REDUCE;
constexpr CollectiveCommType CollectiveCommType_MAX = REDUCE_SCATTER;
constexpr int CollectiveCommType_ARRAYSIZE = CollectiveCommType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectiveCommType_descriptor();
template<typename T>
inline const std::string& CollectiveCommType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CollectiveCommType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CollectiveCommType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CollectiveCommType_descriptor(), enum_t_value);
}
inline bool CollectiveCommType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CollectiveCommType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CollectiveCommType>(
    CollectiveCommType_descriptor(), name, value);
}
// ===================================================================

class AttributeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChakraProtoMsg.AttributeProto) */ {
 public:
  inline AttributeProto() : AttributeProto(nullptr) {}
  ~AttributeProto() override;
  explicit constexpr AttributeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeProto(const AttributeProto& from);
  AttributeProto(AttributeProto&& from) noexcept
    : AttributeProto() {
    *this = ::std::move(from);
  }

  inline AttributeProto& operator=(const AttributeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeProto& operator=(AttributeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeProto* internal_default_instance() {
    return reinterpret_cast<const AttributeProto*>(
               &_AttributeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttributeProto& a, AttributeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttributeProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChakraProtoMsg.AttributeProto";
  }
  protected:
  explicit AttributeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatsFieldNumber = 7,
    kIntsFieldNumber = 8,
    kStringsFieldNumber = 9,
    kNameFieldNumber = 1,
    kDocStringFieldNumber = 3,
    kSFieldNumber = 6,
    kTypeFieldNumber = 2,
    kFFieldNumber = 4,
    kIFieldNumber = 5,
  };
  // repeated float floats = 7;
  int floats_size() const;
  private:
  int _internal_floats_size() const;
  public:
  void clear_floats();
  private:
  float _internal_floats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floats() const;
  void _internal_add_floats(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floats();
  public:
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floats();

  // repeated int64 ints = 8;
  int ints_size() const;
  private:
  int _internal_ints_size() const;
  public:
  void clear_ints();
  private:
  int64_t _internal_ints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ints() const;
  void _internal_add_ints(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ints();
  public:
  int64_t ints(int index) const;
  void set_ints(int index, int64_t value);
  void add_ints(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ints();

  // repeated bytes strings = 9;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const void* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string doc_string = 3;
  bool has_doc_string() const;
  private:
  bool _internal_has_doc_string() const;
  public:
  void clear_doc_string();
  const std::string& doc_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_doc_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_doc_string();
  PROTOBUF_NODISCARD std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // optional string s = 6;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // required .ChakraProtoMsg.AttributeType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ChakraProtoMsg::AttributeType type() const;
  void set_type(::ChakraProtoMsg::AttributeType value);
  private:
  ::ChakraProtoMsg::AttributeType _internal_type() const;
  void _internal_set_type(::ChakraProtoMsg::AttributeType value);
  public:

  // optional float f = 4;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // optional int64 i = 5;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  int64_t i() const;
  void set_i(int64_t value);
  private:
  int64_t _internal_i() const;
  void _internal_set_i(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChakraProtoMsg.AttributeProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  int type_;
  float f_;
  int64_t i_;
  friend struct ::TableStruct_et_5fdef_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChakraProtoMsg.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit constexpr Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChakraProtoMsg.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 4,
    kAttributeFieldNumber = 11,
    kNameFieldNumber = 2,
    kInputsFieldNumber = 5,
    kInputShapesFieldNumber = 6,
    kInputTypesFieldNumber = 7,
    kOutputsFieldNumber = 8,
    kOutputShapesFieldNumber = 9,
    kOutputTypesFieldNumber = 10,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated uint64 parent = 4;
  int parent_size() const;
  private:
  int _internal_parent_size() const;
  public:
  void clear_parent();
  private:
  uint64_t _internal_parent(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_parent() const;
  void _internal_add_parent(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_parent();
  public:
  uint64_t parent(int index) const;
  void set_parent(int index, uint64_t value);
  void add_parent(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      parent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_parent();

  // repeated .ChakraProtoMsg.AttributeProto attribute = 11;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::ChakraProtoMsg::AttributeProto* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChakraProtoMsg::AttributeProto >*
      mutable_attribute();
  private:
  const ::ChakraProtoMsg::AttributeProto& _internal_attribute(int index) const;
  ::ChakraProtoMsg::AttributeProto* _internal_add_attribute();
  public:
  const ::ChakraProtoMsg::AttributeProto& attribute(int index) const;
  ::ChakraProtoMsg::AttributeProto* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChakraProtoMsg::AttributeProto >&
      attribute() const;

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string inputs = 5;
  bool has_inputs() const;
  private:
  bool _internal_has_inputs() const;
  public:
  void clear_inputs();
  const std::string& inputs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputs();
  PROTOBUF_NODISCARD std::string* release_inputs();
  void set_allocated_inputs(std::string* inputs);
  private:
  const std::string& _internal_inputs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputs(const std::string& value);
  std::string* _internal_mutable_inputs();
  public:

  // optional string input_shapes = 6;
  bool has_input_shapes() const;
  private:
  bool _internal_has_input_shapes() const;
  public:
  void clear_input_shapes();
  const std::string& input_shapes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_shapes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_shapes();
  PROTOBUF_NODISCARD std::string* release_input_shapes();
  void set_allocated_input_shapes(std::string* input_shapes);
  private:
  const std::string& _internal_input_shapes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_shapes(const std::string& value);
  std::string* _internal_mutable_input_shapes();
  public:

  // optional string input_types = 7;
  bool has_input_types() const;
  private:
  bool _internal_has_input_types() const;
  public:
  void clear_input_types();
  const std::string& input_types() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_types(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_types();
  PROTOBUF_NODISCARD std::string* release_input_types();
  void set_allocated_input_types(std::string* input_types);
  private:
  const std::string& _internal_input_types() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_types(const std::string& value);
  std::string* _internal_mutable_input_types();
  public:

  // optional string outputs = 8;
  bool has_outputs() const;
  private:
  bool _internal_has_outputs() const;
  public:
  void clear_outputs();
  const std::string& outputs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputs();
  PROTOBUF_NODISCARD std::string* release_outputs();
  void set_allocated_outputs(std::string* outputs);
  private:
  const std::string& _internal_outputs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputs(const std::string& value);
  std::string* _internal_mutable_outputs();
  public:

  // optional string output_shapes = 9;
  bool has_output_shapes() const;
  private:
  bool _internal_has_output_shapes() const;
  public:
  void clear_output_shapes();
  const std::string& output_shapes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_shapes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_shapes();
  PROTOBUF_NODISCARD std::string* release_output_shapes();
  void set_allocated_output_shapes(std::string* output_shapes);
  private:
  const std::string& _internal_output_shapes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_shapes(const std::string& value);
  std::string* _internal_mutable_output_shapes();
  public:

  // optional string output_types = 10;
  bool has_output_types() const;
  private:
  bool _internal_has_output_types() const;
  public:
  void clear_output_types();
  const std::string& output_types() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_types(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_types();
  PROTOBUF_NODISCARD std::string* release_output_types();
  void set_allocated_output_types(std::string* output_types);
  private:
  const std::string& _internal_output_types() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_types(const std::string& value);
  std::string* _internal_mutable_output_types();
  public:

  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // required .ChakraProtoMsg.NodeType type = 3 [default = INVALID_NODE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ChakraProtoMsg::NodeType type() const;
  void set_type(::ChakraProtoMsg::NodeType value);
  private:
  ::ChakraProtoMsg::NodeType _internal_type() const;
  void _internal_set_type(::ChakraProtoMsg::NodeType value);
  public:

  // @@protoc_insertion_point(class_scope:ChakraProtoMsg.Node)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > parent_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChakraProtoMsg::AttributeProto > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_shapes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_shapes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_types_;
  uint64_t id_;
  int type_;
  friend struct ::TableStruct_et_5fdef_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttributeProto

// required string name = 1;
inline bool AttributeProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttributeProto::has_name() const {
  return _internal_has_name();
}
inline void AttributeProto::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AttributeProto::name() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.name)
}
inline std::string* AttributeProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.AttributeProto.name)
  return _s;
}
inline const std::string& AttributeProto::_internal_name() const {
  return name_.Get();
}
inline void AttributeProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AttributeProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AttributeProto::release_name() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.AttributeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AttributeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.name)
}

// required .ChakraProtoMsg.AttributeType type = 2;
inline bool AttributeProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AttributeProto::has_type() const {
  return _internal_has_type();
}
inline void AttributeProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ChakraProtoMsg::AttributeType AttributeProto::_internal_type() const {
  return static_cast< ::ChakraProtoMsg::AttributeType >(type_);
}
inline ::ChakraProtoMsg::AttributeType AttributeProto::type() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.type)
  return _internal_type();
}
inline void AttributeProto::_internal_set_type(::ChakraProtoMsg::AttributeType value) {
  assert(::ChakraProtoMsg::AttributeType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void AttributeProto::set_type(::ChakraProtoMsg::AttributeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.type)
}

// optional string doc_string = 3;
inline bool AttributeProto::_internal_has_doc_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AttributeProto::has_doc_string() const {
  return _internal_has_doc_string();
}
inline void AttributeProto::clear_doc_string() {
  doc_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AttributeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.doc_string)
  return _internal_doc_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeProto::set_doc_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.doc_string)
}
inline std::string* AttributeProto::mutable_doc_string() {
  std::string* _s = _internal_mutable_doc_string();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.AttributeProto.doc_string)
  return _s;
}
inline const std::string& AttributeProto::_internal_doc_string() const {
  return doc_string_.Get();
}
inline void AttributeProto::_internal_set_doc_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AttributeProto::_internal_mutable_doc_string() {
  _has_bits_[0] |= 0x00000002u;
  return doc_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AttributeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.AttributeProto.doc_string)
  if (!_internal_has_doc_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = doc_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (doc_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AttributeProto::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  doc_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (doc_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.doc_string)
}

// optional float f = 4;
inline bool AttributeProto::_internal_has_f() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AttributeProto::has_f() const {
  return _internal_has_f();
}
inline void AttributeProto::clear_f() {
  f_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float AttributeProto::_internal_f() const {
  return f_;
}
inline float AttributeProto::f() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.f)
  return _internal_f();
}
inline void AttributeProto::_internal_set_f(float value) {
  _has_bits_[0] |= 0x00000010u;
  f_ = value;
}
inline void AttributeProto::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.f)
}

// optional int64 i = 5;
inline bool AttributeProto::_internal_has_i() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AttributeProto::has_i() const {
  return _internal_has_i();
}
inline void AttributeProto::clear_i() {
  i_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t AttributeProto::_internal_i() const {
  return i_;
}
inline int64_t AttributeProto::i() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.i)
  return _internal_i();
}
inline void AttributeProto::_internal_set_i(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  i_ = value;
}
inline void AttributeProto::set_i(int64_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.i)
}

// optional string s = 6;
inline bool AttributeProto::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AttributeProto::has_s() const {
  return _internal_has_s();
}
inline void AttributeProto::clear_s() {
  s_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AttributeProto::s() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeProto::set_s(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.s)
}
inline std::string* AttributeProto::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.AttributeProto.s)
  return _s;
}
inline const std::string& AttributeProto::_internal_s() const {
  return s_.Get();
}
inline void AttributeProto::_internal_set_s(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AttributeProto::_internal_mutable_s() {
  _has_bits_[0] |= 0x00000004u;
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AttributeProto::release_s() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.AttributeProto.s)
  if (!_internal_has_s()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = s_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AttributeProto::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.s)
}

// repeated float floats = 7;
inline int AttributeProto::_internal_floats_size() const {
  return floats_.size();
}
inline int AttributeProto::floats_size() const {
  return _internal_floats_size();
}
inline void AttributeProto::clear_floats() {
  floats_.Clear();
}
inline float AttributeProto::_internal_floats(int index) const {
  return floats_.Get(index);
}
inline float AttributeProto::floats(int index) const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.floats)
  return _internal_floats(index);
}
inline void AttributeProto::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.floats)
}
inline void AttributeProto::_internal_add_floats(float value) {
  floats_.Add(value);
}
inline void AttributeProto::add_floats(float value) {
  _internal_add_floats(value);
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.AttributeProto.floats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttributeProto::_internal_floats() const {
  return floats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttributeProto::floats() const {
  // @@protoc_insertion_point(field_list:ChakraProtoMsg.AttributeProto.floats)
  return _internal_floats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttributeProto::_internal_mutable_floats() {
  return &floats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttributeProto::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:ChakraProtoMsg.AttributeProto.floats)
  return _internal_mutable_floats();
}

// repeated int64 ints = 8;
inline int AttributeProto::_internal_ints_size() const {
  return ints_.size();
}
inline int AttributeProto::ints_size() const {
  return _internal_ints_size();
}
inline void AttributeProto::clear_ints() {
  ints_.Clear();
}
inline int64_t AttributeProto::_internal_ints(int index) const {
  return ints_.Get(index);
}
inline int64_t AttributeProto::ints(int index) const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.ints)
  return _internal_ints(index);
}
inline void AttributeProto::set_ints(int index, int64_t value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.ints)
}
inline void AttributeProto::_internal_add_ints(int64_t value) {
  ints_.Add(value);
}
inline void AttributeProto::add_ints(int64_t value) {
  _internal_add_ints(value);
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.AttributeProto.ints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AttributeProto::_internal_ints() const {
  return ints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AttributeProto::ints() const {
  // @@protoc_insertion_point(field_list:ChakraProtoMsg.AttributeProto.ints)
  return _internal_ints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AttributeProto::_internal_mutable_ints() {
  return &ints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AttributeProto::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:ChakraProtoMsg.AttributeProto.ints)
  return _internal_mutable_ints();
}

// repeated bytes strings = 9;
inline int AttributeProto::_internal_strings_size() const {
  return strings_.size();
}
inline int AttributeProto::strings_size() const {
  return _internal_strings_size();
}
inline void AttributeProto::clear_strings() {
  strings_.Clear();
}
inline std::string* AttributeProto::add_strings() {
  std::string* _s = _internal_add_strings();
  // @@protoc_insertion_point(field_add_mutable:ChakraProtoMsg.AttributeProto.strings)
  return _s;
}
inline const std::string& AttributeProto::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& AttributeProto::strings(int index) const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.AttributeProto.strings)
  return _internal_strings(index);
}
inline std::string* AttributeProto::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.AttributeProto.strings)
  return strings_.Mutable(index);
}
inline void AttributeProto::set_strings(int index, const std::string& value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.strings)
}
inline void AttributeProto::set_strings(int index, std::string&& value) {
  strings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.AttributeProto.strings)
}
inline void AttributeProto::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChakraProtoMsg.AttributeProto.strings)
}
inline void AttributeProto::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChakraProtoMsg.AttributeProto.strings)
}
inline std::string* AttributeProto::_internal_add_strings() {
  return strings_.Add();
}
inline void AttributeProto::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.AttributeProto.strings)
}
inline void AttributeProto::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChakraProtoMsg.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChakraProtoMsg.AttributeProto.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttributeProto::strings() const {
  // @@protoc_insertion_point(field_list:ChakraProtoMsg.AttributeProto.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttributeProto::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:ChakraProtoMsg.AttributeProto.strings)
  return &strings_;
}

// -------------------------------------------------------------------

// Node

// required uint64 id = 1;
inline bool Node::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Node::has_id() const {
  return _internal_has_id();
}
inline void Node::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t Node::_internal_id() const {
  return id_;
}
inline uint64_t Node::id() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void Node::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.id)
}

// required string name = 2;
inline bool Node::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_name() const {
  return _internal_has_name();
}
inline void Node::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.name)
}
inline std::string* Node::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.name)
  return _s;
}
inline const std::string& Node::_internal_name() const {
  return name_.Get();
}
inline void Node::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.name)
}

// required .ChakraProtoMsg.NodeType type = 3 [default = INVALID_NODE];
inline bool Node::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Node::has_type() const {
  return _internal_has_type();
}
inline void Node::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::ChakraProtoMsg::NodeType Node::_internal_type() const {
  return static_cast< ::ChakraProtoMsg::NodeType >(type_);
}
inline ::ChakraProtoMsg::NodeType Node::type() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.type)
  return _internal_type();
}
inline void Node::_internal_set_type(::ChakraProtoMsg::NodeType value) {
  assert(::ChakraProtoMsg::NodeType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  type_ = value;
}
inline void Node::set_type(::ChakraProtoMsg::NodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.type)
}

// repeated uint64 parent = 4;
inline int Node::_internal_parent_size() const {
  return parent_.size();
}
inline int Node::parent_size() const {
  return _internal_parent_size();
}
inline void Node::clear_parent() {
  parent_.Clear();
}
inline uint64_t Node::_internal_parent(int index) const {
  return parent_.Get(index);
}
inline uint64_t Node::parent(int index) const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.parent)
  return _internal_parent(index);
}
inline void Node::set_parent(int index, uint64_t value) {
  parent_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.parent)
}
inline void Node::_internal_add_parent(uint64_t value) {
  parent_.Add(value);
}
inline void Node::add_parent(uint64_t value) {
  _internal_add_parent(value);
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.Node.parent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Node::_internal_parent() const {
  return parent_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Node::parent() const {
  // @@protoc_insertion_point(field_list:ChakraProtoMsg.Node.parent)
  return _internal_parent();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Node::_internal_mutable_parent() {
  return &parent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Node::mutable_parent() {
  // @@protoc_insertion_point(field_mutable_list:ChakraProtoMsg.Node.parent)
  return _internal_mutable_parent();
}

// optional string inputs = 5;
inline bool Node::_internal_has_inputs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Node::has_inputs() const {
  return _internal_has_inputs();
}
inline void Node::clear_inputs() {
  inputs_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Node::inputs() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.inputs)
  return _internal_inputs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_inputs(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.inputs)
}
inline std::string* Node::mutable_inputs() {
  std::string* _s = _internal_mutable_inputs();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.inputs)
  return _s;
}
inline const std::string& Node::_internal_inputs() const {
  return inputs_.Get();
}
inline void Node::_internal_set_inputs(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_inputs() {
  _has_bits_[0] |= 0x00000002u;
  return inputs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_inputs() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.inputs)
  if (!_internal_has_inputs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = inputs_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inputs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    inputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_inputs(std::string* inputs) {
  if (inputs != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inputs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputs,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inputs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    inputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.inputs)
}

// optional string input_shapes = 6;
inline bool Node::_internal_has_input_shapes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Node::has_input_shapes() const {
  return _internal_has_input_shapes();
}
inline void Node::clear_input_shapes() {
  input_shapes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Node::input_shapes() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.input_shapes)
  return _internal_input_shapes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_input_shapes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 input_shapes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.input_shapes)
}
inline std::string* Node::mutable_input_shapes() {
  std::string* _s = _internal_mutable_input_shapes();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.input_shapes)
  return _s;
}
inline const std::string& Node::_internal_input_shapes() const {
  return input_shapes_.Get();
}
inline void Node::_internal_set_input_shapes(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  input_shapes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_input_shapes() {
  _has_bits_[0] |= 0x00000004u;
  return input_shapes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_input_shapes() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.input_shapes)
  if (!_internal_has_input_shapes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = input_shapes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_shapes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_shapes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_input_shapes(std::string* input_shapes) {
  if (input_shapes != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_shapes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_shapes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_shapes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_shapes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.input_shapes)
}

// optional string input_types = 7;
inline bool Node::_internal_has_input_types() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Node::has_input_types() const {
  return _internal_has_input_types();
}
inline void Node::clear_input_types() {
  input_types_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Node::input_types() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.input_types)
  return _internal_input_types();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_input_types(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 input_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.input_types)
}
inline std::string* Node::mutable_input_types() {
  std::string* _s = _internal_mutable_input_types();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.input_types)
  return _s;
}
inline const std::string& Node::_internal_input_types() const {
  return input_types_.Get();
}
inline void Node::_internal_set_input_types(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  input_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_input_types() {
  _has_bits_[0] |= 0x00000008u;
  return input_types_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_input_types() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.input_types)
  if (!_internal_has_input_types()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = input_types_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_types_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_input_types(std::string* input_types) {
  if (input_types != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  input_types_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_types,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_types_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.input_types)
}

// optional string outputs = 8;
inline bool Node::_internal_has_outputs() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Node::has_outputs() const {
  return _internal_has_outputs();
}
inline void Node::clear_outputs() {
  outputs_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Node::outputs() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.outputs)
  return _internal_outputs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_outputs(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.outputs)
}
inline std::string* Node::mutable_outputs() {
  std::string* _s = _internal_mutable_outputs();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.outputs)
  return _s;
}
inline const std::string& Node::_internal_outputs() const {
  return outputs_.Get();
}
inline void Node::_internal_set_outputs(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_outputs() {
  _has_bits_[0] |= 0x00000010u;
  return outputs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_outputs() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.outputs)
  if (!_internal_has_outputs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = outputs_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outputs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    outputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_outputs(std::string* outputs) {
  if (outputs != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  outputs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputs,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outputs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    outputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.outputs)
}

// optional string output_shapes = 9;
inline bool Node::_internal_has_output_shapes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Node::has_output_shapes() const {
  return _internal_has_output_shapes();
}
inline void Node::clear_output_shapes() {
  output_shapes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Node::output_shapes() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.output_shapes)
  return _internal_output_shapes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_output_shapes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 output_shapes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.output_shapes)
}
inline std::string* Node::mutable_output_shapes() {
  std::string* _s = _internal_mutable_output_shapes();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.output_shapes)
  return _s;
}
inline const std::string& Node::_internal_output_shapes() const {
  return output_shapes_.Get();
}
inline void Node::_internal_set_output_shapes(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  output_shapes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_output_shapes() {
  _has_bits_[0] |= 0x00000020u;
  return output_shapes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_output_shapes() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.output_shapes)
  if (!_internal_has_output_shapes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = output_shapes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_shapes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_shapes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_output_shapes(std::string* output_shapes) {
  if (output_shapes != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  output_shapes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_shapes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_shapes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_shapes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.output_shapes)
}

// optional string output_types = 10;
inline bool Node::_internal_has_output_types() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Node::has_output_types() const {
  return _internal_has_output_types();
}
inline void Node::clear_output_types() {
  output_types_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Node::output_types() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.output_types)
  return _internal_output_types();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_output_types(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 output_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.output_types)
}
inline std::string* Node::mutable_output_types() {
  std::string* _s = _internal_mutable_output_types();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.output_types)
  return _s;
}
inline const std::string& Node::_internal_output_types() const {
  return output_types_.Get();
}
inline void Node::_internal_set_output_types(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  output_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_output_types() {
  _has_bits_[0] |= 0x00000040u;
  return output_types_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_output_types() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.output_types)
  if (!_internal_has_output_types()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = output_types_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_types_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_output_types(std::string* output_types) {
  if (output_types != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  output_types_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_types,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_types_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.output_types)
}

// repeated .ChakraProtoMsg.AttributeProto attribute = 11;
inline int Node::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Node::attribute_size() const {
  return _internal_attribute_size();
}
inline void Node::clear_attribute() {
  attribute_.Clear();
}
inline ::ChakraProtoMsg::AttributeProto* Node::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChakraProtoMsg::AttributeProto >*
Node::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:ChakraProtoMsg.Node.attribute)
  return &attribute_;
}
inline const ::ChakraProtoMsg::AttributeProto& Node::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::ChakraProtoMsg::AttributeProto& Node::attribute(int index) const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.attribute)
  return _internal_attribute(index);
}
inline ::ChakraProtoMsg::AttributeProto* Node::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::ChakraProtoMsg::AttributeProto* Node::add_attribute() {
  ::ChakraProtoMsg::AttributeProto* _add = _internal_add_attribute();
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.Node.attribute)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChakraProtoMsg::AttributeProto >&
Node::attribute() const {
  // @@protoc_insertion_point(field_list:ChakraProtoMsg.Node.attribute)
  return attribute_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChakraProtoMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChakraProtoMsg::NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChakraProtoMsg::NodeType>() {
  return ::ChakraProtoMsg::NodeType_descriptor();
}
template <> struct is_proto_enum< ::ChakraProtoMsg::AttributeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChakraProtoMsg::AttributeType>() {
  return ::ChakraProtoMsg::AttributeType_descriptor();
}
template <> struct is_proto_enum< ::ChakraProtoMsg::CollectiveCommType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChakraProtoMsg::CollectiveCommType>() {
  return ::ChakraProtoMsg::CollectiveCommType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_et_5fdef_2eproto
